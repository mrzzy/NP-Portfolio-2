{
	"info": {
		"_postman_id": "37e957f3-16c2-4f80-9015-1eb239296e96",
		"name": "momento/api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "create organisation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    pm.globals.set(\"holding_org_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Holding Org\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/org",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"org"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save org_id for later tests",
									"    pm.globals.set(\"auth_user_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Omega\",\n\t\"password\": \"P@$$w0rd\",\n\t\"email\": \"omega@gmail.com\",\n\t\"orgId\": {{holding_org_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/user",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bcc2e17-3b49-41c8-a050-689584d4cdd7",
								"exec": [
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    const response = pm.response.json();",
									"    pm.globals.set(\"refresh_token\", response.refreshToken)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"omega@gmail.com\",\n\t\"password\": \"P@$$w0rd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/auth/login",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "check token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bcc2e17-3b49-41c8-a050-689584d4cdd7",
								"exec": [
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    const response = pm.response.json();",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/auth/check",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"check"
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bcc2e17-3b49-41c8-a050-689584d4cdd7",
								"exec": [
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    const response = pm.response.json();",
									"    pm.globals.set(\"access_token\", response.accessToken)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refresh_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/auth/refresh",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "identity",
			"item": [
				{
					"name": "create organisation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save org_id for later tests",
									"    pm.globals.set(\"org_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Fishery\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/org",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"org"
							]
						}
					},
					"response": []
				},
				{
					"name": "query organisation ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/orgs",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"orgs"
							]
						}
					},
					"response": []
				},
				{
					"name": "get organisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"const assert = require(\"assert\")",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const org = pm.response.json();",
									"    assert(org.name === \"John and Wicks Fishery\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/org/{{org_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"org",
								"{{org_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update organisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "460b02f0-32fe-46e9-94e0-a2348cd1dfeb",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Bakery\",\n\t\"logoUrl\": \"logo.jpg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/org/{{org_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"org",
								"{{org_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create team",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save org_id for later tests",
									"    pm.globals.set(\"team_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"designers\",\n\t\"orgId\": {{org_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/team",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"team"
							]
						}
					},
					"response": []
				},
				{
					"name": "query team ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/teams?org={{org_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"teams"
							],
							"query": [
								{
									"key": "org",
									"value": "{{org_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get team",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"const assert = require(\"assert\")",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const team = pm.response.json();",
									"    assert(team.name === \"designers\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/team/{{team_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"team",
								"{{team_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update team",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "460b02f0-32fe-46e9-94e0-a2348cd1dfeb",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Bakery\",\n\t\"logoUrl\": \"logo.jpg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/team/{{team_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"team",
								"{{team_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save org_id for later tests",
									"    pm.globals.set(\"user_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Joel\",\n\t\"password\": \"P@$$w0rd\",\n\t\"email\": \"joel@gmail.com\",\n\t\"orgId\": {{org_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/user",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create supervisor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save org_id for later tests",
									"    pm.globals.set(\"supervisor_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"James\",\n\t\"password\": \"P@$$w0rd\",\n\t\"email\": \"james@gmail.com\",\n\t\"orgId\": {{org_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/user",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "assign user to team",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"teamId\": {{team_id}},\n\t\"userId\": {{user_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/team/assign",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"team",
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "query users ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/users?team={{team_id}}&org={{org_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"users"
							],
							"query": [
								{
									"key": "team",
									"value": "{{team_id}}"
								},
								{
									"key": "org",
									"value": "{{org_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04bc69b5-f113-4e62-8519-a590d8c45714",
								"exec": [
									"const assert = require(\"assert\")",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const user = pm.response.json();",
									"    assert(user.name === \"Joel\");",
									"    assert(user.password === \"P@$$w0rd\");",
									"    assert(user.email === \"joel@gmail.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/user/{{user_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"user",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54724ff0-e46c-4908-8d1a-62a5ac83af05",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Bakery\",\n\t\"logoUrl\": \"logo.jpg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/user/{{user_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"user",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new management",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save manage_id for later tests",
									"    pm.globals.set(\"manage_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"manageeId\": {{user_id}},\n\t\"managerId\": {{supervisor_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/manage",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"manage"
							]
						}
					},
					"response": []
				},
				{
					"name": "query mangement ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/manages?org={{org_id}}&manager={{supervisor_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"manages"
							],
							"query": [
								{
									"key": "org",
									"value": "{{org_id}}"
								},
								{
									"key": "manager",
									"value": "{{supervisor_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get managment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"const assert = require(\"assert\")",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const manage = pm.response.json();",
									"    assert(manage.managerId === pm.globals.get(\"supervisor_id\"));",
									"    assert(manage.manageeId === pm.globals.get(\"user_id\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/manage/{{manage_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"manage",
								"{{manage_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new role",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save manage_id for later tests",
									"    pm.globals.set(\"role_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"scopeKind\": \"global\",\n\t\"scopeTarget\": null,\n\t\"kind\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/role",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"role"
							]
						}
					},
					"response": []
				},
				{
					"name": "query role ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1950e2a9-10ed-47cd-89c5-5575b4df6e0b",
								"exec": [
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/roles",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "get role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"const assert = require(\"assert\")",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const role = pm.response.json()",
									"    assert(role.kind === \"admin\")",
									"    assert(role.scopeKind === \"global\")",
									"    assert(role.scopeTarget === 0)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/role/{{role_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"role",
								"{{role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new rolebinding",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2088b16b-28df-4432-8a35-58803c9c90ac",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save manage_id for later tests",
									"    pm.globals.set(\"rolebind_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8a315a7a-4c06-4664-81e5-76011ebaab3e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"roleId\": \"{{role_id}}\",\n\t\"userId\": {{user_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/rolebind",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"rolebind"
							]
						}
					},
					"response": []
				},
				{
					"name": "query role binding ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1950e2a9-10ed-47cd-89c5-5575b4df6e0b",
								"exec": [
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/rolebinds",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"rolebinds"
							]
						}
					},
					"response": []
				},
				{
					"name": "get role binding",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"const assert = require(\"assert\")",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const rolebind = pm.response.json();",
									"",
									"    assert(rolebind.roleId === pm.globals.get(\"role_id\"))",
									"    assert(rolebind.userId === pm.globals.get(\"user_id\"))",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/rolebind/{{rolebind_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"rolebind",
								"{{rolebind_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete management",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e4bb5fe-a230-4ad9-bb53-26cac58f0d94",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/manage/{{manage_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"manage",
								"{{manage_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete role binding",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e4bb5fe-a230-4ad9-bb53-26cac58f0d94",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/rolebind/{{rolebind_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"rolebind",
								"{{rolebind_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e4bb5fe-a230-4ad9-bb53-26cac58f0d94",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/role/{{role_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"role",
								"{{role_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "unassign user from team",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"teamId\": {{team_id}},\n\t\"userId\": {{user_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/team/assign",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"team",
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e4bb5fe-a230-4ad9-bb53-26cac58f0d94",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Fishery\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/user/{{user_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"user",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete team",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "734f3299-a9b8-4d66-b081-b0921e1eb3c6",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/team/{{team_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"team",
								"{{team_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete organisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e4bb5fe-a230-4ad9-bb53-26cac58f0d94",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Fishery\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/org/{{org_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"org",
								"{{org_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "assignment",
			"item": [
				{
					"name": "create organisation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save org_id for later tests",
									"    pm.globals.set(\"org_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Fishery\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/org",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"org"
							]
						}
					},
					"response": []
				},
				{
					"name": "create  supervisor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save org_id for later tests",
									"    pm.globals.set(\"supervisor_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"James\",\n\t\"password\": \"P@$$w0rd\",\n\t\"email\": \"james@gmail.com\",\n\t\"orgId\": {{org_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/user",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create worker",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbd80a3c-db36-4cc0-b3aa-ab0e2321e54e",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save org_id for later tests",
									"    pm.globals.set(\"worker_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9513737b-30c8-4e80-9f32-d6934555d92a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Joel\",\n\t\"password\": \"P@$$w0rd\",\n\t\"email\": \"joel@gmail.com\",\n\t\"orgId\": {{org_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/user",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create task",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save task_id for later tests",
									"    pm.globals.set(\"task_id\",  response.id);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"fishing\",\n\t\"description\": \"Complete the fishing quota by going fishing\",\n\t\"duration\": 3600,\n\t\"deadline\": \"2099-11-11T11:51:53.334Z\",\n\t\"authorId\": {{supervisor_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/task",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "query task ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0a39747-c47b-4815-9269-445b3c7d755d",
								"exec": [
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/tasks?author={{supervisor_id}}&pending=1",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"tasks"
							],
							"query": [
								{
									"key": "author",
									"value": "{{supervisor_id}}"
								},
								{
									"key": "pending",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"const assert = require(\"assert\")",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const task = pm.response.json();",
									"    assert(task.name === \"fishing\");",
									"    assert(task.duration === 3600);",
									"    assert(task.completed === false);",
									"    const deadline = new Date(task.deadline)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/task/{{task_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"task",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "460b02f0-32fe-46e9-94e0-a2348cd1dfeb",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authorId\": {{supervisor_id}},\n    \"completed\": true,\n    \"deadline\": \"2099-11-11T11:51:53.334Z\",\n    \"description\": \"Complete the fishing quota by going fishing\",\n    \"duration\": 3600,\n    \"name\": \"fishing\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/task/{{task_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"task",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create event",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save task_id for later tests",
									"    pm.globals.set(\"event_id\",  response.id);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"penny counting event\",\n\t\"description\": \"Annual penny counting event\",\n\t\"duration\": 3600,\n\t\"startTime\": \"2099-11-11T11:51:53.334Z\",\n\t\"authorId\": {{supervisor_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/event",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "query event ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/events?author={{supervisor_id}}&pending=1",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"events"
							],
							"query": [
								{
									"key": "author",
									"value": "{{supervisor_id}}"
								},
								{
									"key": "pending",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"const assert = require(\"assert\")",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const event = pm.response.json();",
									"    assert(event.name === \"penny counting event\");",
									"    assert(event.description === \"Annual penny counting event\");",
									"    assert(event.duration === 3600);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/event/{{event_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"event",
								"{{event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "460b02f0-32fe-46e9-94e0-a2348cd1dfeb",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Dollar counting event\",\n\t\"description\": \"Annual dollar counting event\",\n\t\"duration\": 3600,\n\t\"startTime\": \"2099-11-11T11:51:53.334Z\",\n\t\"authorId\": {{supervisor_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/event/{{event_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"event",
								"{{event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5e71648-f05d-43f6-922c-7b0457d57964",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save assign_id for later tests",
									"    pm.globals.set(\"assign_id\",  response.id);",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f82ed9d2-4030-4106-b5f7-cad211e7ae71",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"kind\": \"task\",\n\t\"itemId\": {{task_id}},\n\t\"assigneeId\": {{worker_id}},\n\t\"assignerId\": {{supervisor_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/assign",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "query assignment ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/assigns?pending=1&kind=task",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"assigns"
							],
							"query": [
								{
									"key": "pending",
									"value": "1"
								},
								{
									"key": "kind",
									"value": "task"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"const assert = require(\"assert\")",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const assign = pm.response.json();",
									"    assert(assign.itemId === pm.globals.get(\"task_id\"));",
									"    assert(assign.kind === \"task\");",
									"    assert(assign.assigneeId === pm.globals.get(\"worker_id\"));",
									"    assert(assign.assignerId === pm.globals.get(\"supervisor_id\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/assign/{{assign_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"assign",
								"{{assign_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "460b02f0-32fe-46e9-94e0-a2348cd1dfeb",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"assigneeId\": {{worker_id}},\n    \"assignerId\": {{supervisor_id}},\n    \"itemId\": {{event_id}},\n    \"kind\": \"event\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/assign/{{assign_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"assign",
								"{{assign_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e4bb5fe-a230-4ad9-bb53-26cac58f0d94",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Fishery\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/assign/{{assign_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"assign",
								"{{assign_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete event",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/event/{{event_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"event",
								"{{event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete task",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e4bb5fe-a230-4ad9-bb53-26cac58f0d94",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Fishery\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/assignment/task/{{task_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"assignment",
								"task",
								"{{task_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete organisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e4bb5fe-a230-4ad9-bb53-26cac58f0d94",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Fishery\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/org/{{org_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"org",
								"{{org_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "notification",
			"item": [
				{
					"name": "create organisation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save org_id for later tests",
									"    pm.globals.set(\"org_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Fishery\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/org",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"org"
							]
						}
					},
					"response": []
				},
				{
					"name": "create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8f719416-0efb-4104-a268-8181e1808675",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2e7fd77-d053-47b3-9c2d-1518f301349f",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save org_id for later tests",
									"    pm.globals.set(\"user_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Joel\",\n\t\"password\": \"P@$$w0rd\",\n\t\"email\": \"joel@gmail.com\",\n\t\"orgId\": {{org_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/user",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bebc176-6d45-4299-9dbf-eb1fd885c987",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save channel_id for later tests",
									"    pm.globals.set(\"channel_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "65bf49c5-8b04-4a81-b0e9-ae920ef1d294",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"kind\": \"task\",\n\t\"userId\": {{user_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/notification/channel",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"notification",
								"channel"
							]
						}
					},
					"response": []
				},
				{
					"name": "query channel ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/notification/channels",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"notification",
								"channels"
							]
						}
					},
					"response": []
				},
				{
					"name": "get channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"const assert = require(\"assert\")",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const channel = pm.response.json();",
									"    assert(channel.kind === \"task\");",
									"    assert(channel.userId === pm.globals.get(\"user_id\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/notification/channel/{{channel_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"notification",
								"channel",
								"{{channel_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "460b02f0-32fe-46e9-94e0-a2348cd1dfeb",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"kind\": \"event\",\n    \"userId\": {{user_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/notification/channel/{{channel_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"notification",
								"channel",
								"{{channel_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create notifcation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc3b98ee-7f15-4c51-bf4b-9143668f37ed",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save notify_id for later tests",
									"    pm.globals.set(\"notify_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5e6097c2-a931-4b03-bccf-8df2a46ee17a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"fishing task\",\n\t\"description\": \"You have been assigned a fishing task\",\n\t\"firingTime\": \"2019-11-15T11:51:23.270Z\",\n\t\"channelId\": {{channel_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/notification/notify",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"notification",
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "create notifcation fire now",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc3b98ee-7f15-4c51-bf4b-9143668f37ed",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"id\"));",
									"    // save notify_id for later tests",
									"    pm.globals.set(\"notify_id\",  response.id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5e6097c2-a931-4b03-bccf-8df2a46ee17a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"fishing task\",\n\t\"description\": \"You have been assigned a fishing task\",\n\t\"firingTime\": null,\n\t\"channelId\": {{channel_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/notification/notify",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"notification",
								"notify"
							]
						}
					},
					"response": []
				},
				{
					"name": "query notification ids",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8595dca9-5426-42d1-a98b-45deef262782",
								"exec": [
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/notification/notifys?pending=1&channel={{channel_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"notification",
								"notifys"
							],
							"query": [
								{
									"key": "pending",
									"value": "1"
								},
								{
									"key": "channel",
									"value": "{{channel_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40d0777c-bd8d-42ae-978e-fb692447704b",
								"exec": [
									"const assert = require(\"assert\")",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const notify = pm.response.json();",
									"    assert(notify.description === \"You have been assigned a fishing task\")",
									"    assert(notify.title === \"fishing task\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/notification/notify/{{notify_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"notification",
								"notify",
								"{{notify_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "460b02f0-32fe-46e9-94e0-a2348cd1dfeb",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"cooking task\",\n\t\"description\": \"You have been assigned a cooking task\",\n\t\"firingTime\": \"2099-11-11T11:51:53.334Z\",\n\t\"channelId\": {{channel_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/notification/notify/{{notify_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"notification",
								"notify",
								"{{notify_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e4bb5fe-a230-4ad9-bb53-26cac58f0d94",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Fishery\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/notification/notify/{{notify_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"notification",
								"notify",
								"{{notify_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e4bb5fe-a230-4ad9-bb53-26cac58f0d94",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Fishery\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/notification/channel/{{channel_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"notification",
								"channel",
								"{{channel_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete organisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e4bb5fe-a230-4ad9-bb53-26cac58f0d94",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Fishery\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/org/{{org_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"org",
								"{{org_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "status",
			"item": [
				{
					"name": "get api status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "caa1739e-7b23-4e0f-a287-b51303716fce",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.status === \"OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{api_host}}/api/v1/status",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "cleanup",
			"item": [
				{
					"name": "delete organisation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e4bb5fe-a230-4ad9-bb53-26cac58f0d94",
								"exec": [
									"const assert = require(\"assert\");",
									"",
									"pm.test(\"status code ok\", () => {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test(\"response is parsable json\", ()  => {",
									"    pm.response.json();",
									"})",
									"",
									"pm.test(\"response has expected contents\", () => {",
									"    const response = pm.response.json();",
									"    assert(response.hasOwnProperty(\"success\"));",
									"    assert(response.success);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John and Wicks Fishery\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{api_host}}/api/v1/identity/org/{{holding_org_id}}",
							"protocol": "http",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v1",
								"identity",
								"org",
								"{{holding_org_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "75c6e7d5-feb3-41f9-b472-e330ba466370",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "bec4739b-60fd-476b-865e-ff8c4ddf96d5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}